{"ast":null,"code":"import UserModel from '../models/UserModel.js';\nclass AuthService {\n  constructor() {\n    this.userModel = UserModel;\n    // Khôi phục người dùng từ token khi khởi tạo\n    this.getCurrentUser();\n  }\n  async register(newUser) {\n    try {\n      const response = await fetch('http://localhost:5000/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newUser)\n      });\n      const result = await response.json();\n      result.status = response.status;\n      if (result.success) {\n        localStorage.setItem('accessToken', result.accessToken);\n        localStorage.setItem('refreshToken', result.refreshToken);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Lỗi hệ thống, vui lòng thử lại.',\n        status: 500\n      };\n    }\n  }\n  async login(email, password) {\n    try {\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        localStorage.setItem('accessToken', result.accessToken);\n        localStorage.setItem('refreshToken', result.refreshToken);\n        this.userModel.setCurrentUser(result.user);\n      }\n      return result;\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: 'Lỗi hệ thống, vui lòng thử lại.'\n      };\n    }\n  }\n  async refreshToken() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        return {\n          success: false,\n          message: 'Không có refresh token'\n        };\n      }\n      const response = await fetch('http://localhost:5000/api/refresh-token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        localStorage.setItem('accessToken', result.accessToken);\n        localStorage.setItem('refreshToken', result.refreshToken);\n      }\n      return result;\n    } catch (error) {\n      console.error('Refresh token error:', error);\n      return {\n        success: false,\n        message: 'Không thể làm mới token'\n      };\n    }\n  }\n  async logout() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    this.userModel.clearCurrentUser();\n    await fetch('http://localhost:5000/api/logout', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    });\n  }\n  async getCurrentUser() {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return null;\n    try {\n      const response = await fetch('http://localhost:5000/api/user', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const result = await response.json();\n      if (result.success) {\n        this.userModel.setCurrentUser(result.user);\n        return result.user;\n      } else if (result.expired) {\n        const refreshResult = await this.refreshToken();\n        if (refreshResult.success) {\n          return await this.getCurrentUser(); // Thử lại với token mới\n        } else {\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n          this.userModel.clearCurrentUser();\n          return null;\n        }\n      } else {\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        this.userModel.clearCurrentUser();\n        return null;\n      }\n    } catch (error) {\n      console.error('Get user error:', error);\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      this.userModel.clearCurrentUser();\n      return null;\n    }\n  }\n  isAuthenticated() {\n    return !!this.userModel.getCurrentUser();\n  }\n  async getOrders() {\n    try {\n      const response = await fetch('http://localhost:5000/api/orders', {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      const result = await response.json();\n      if (result.success) {\n        return result.orders;\n      } else if (result.expired) {\n        const refreshResult = await AuthService.refreshToken();\n        if (refreshResult.success) {\n          // Thử lại với token mới\n          const retryResponse = await fetch('http://localhost:5000/api/orders', {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n            }\n          });\n          const retryResult = await retryResponse.json();\n          if (retryResult.success) {\n            return retryResult.orders;\n          }\n          throw new Error(retryResult.message || 'Không thể tải đơn hàng.');\n        }\n        throw new Error('Phiên đăng nhập hết hạn.');\n      }\n      throw new Error(result.message || 'Không thể tải đơn hàng.');\n    } catch (error) {\n      console.error('OrderModel getOrders error:', error);\n      throw error;\n    }\n  }\n  async getAddressCount(userId) {\n    try {\n      const response = await fetch('http://localhost:5000/api/addresses', {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      });\n      const result = await response.json();\n      if (result.success) {\n        return result.addresses.length;\n      } else if (result.expired) {\n        const refreshResult = await AuthService.refreshToken();\n        if (refreshResult.success) {\n          const retryResponse = await fetch('http://localhost:5000/api/addresses', {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n            }\n          });\n          const retryResult = await retryResponse.json();\n          if (retryResult.success) {\n            return retryResult.addresses.length;\n          }\n          throw new Error(retryResult.message || 'Không thể tải danh sách địa chỉ.');\n        }\n        throw new Error('Phiên đăng nhập hết hạn.');\n      }\n      throw new Error(result.message || 'Không thể tải danh sách địa chỉ.');\n    } catch (error) {\n      console.error('OrderModel getAddressCount error:', error);\n      throw error;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["UserModel","AuthService","constructor","userModel","getCurrentUser","register","newUser","response","fetch","method","headers","body","JSON","stringify","result","json","status","success","localStorage","setItem","accessToken","refreshToken","error","message","login","email","password","setCurrentUser","user","console","getItem","logout","removeItem","clearCurrentUser","Authorization","token","expired","refreshResult","isAuthenticated","getOrders","orders","retryResponse","retryResult","Error","getAddressCount","userId","addresses","length"],"sources":["D:/Hoang.bk/Documents/GitHub/HHSHOP/Frontend/src/services/AuthService.js"],"sourcesContent":["import UserModel from '../models/UserModel.js';\r\n\r\nclass AuthService {\r\n  constructor() {\r\n    this.userModel = UserModel;\r\n    // Khôi phục người dùng từ token khi khởi tạo\r\n    this.getCurrentUser();\r\n  }\r\n\r\n  async register(newUser) {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newUser)\r\n      });\r\n      const result = await response.json();\r\n      result.status = response.status;\r\n      if (result.success) {\r\n        localStorage.setItem('accessToken', result.accessToken);\r\n        localStorage.setItem('refreshToken', result.refreshToken);\r\n      }\r\n      return result;\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        message: 'Lỗi hệ thống, vui lòng thử lại.', \r\n        status: 500 \r\n      };\r\n    }\r\n  }\r\n\r\n  async login(email, password) {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n      const result = await response.json();\r\n      if (result.success) {\r\n        localStorage.setItem('accessToken', result.accessToken);\r\n        localStorage.setItem('refreshToken', result.refreshToken);\r\n        this.userModel.setCurrentUser(result.user);\r\n      }\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { success: false, message: 'Lỗi hệ thống, vui lòng thử lại.' };\r\n    }\r\n  }\r\n\r\n  async refreshToken() {\r\n    try {\r\n      const refreshToken = localStorage.getItem('refreshToken');\r\n      if (!refreshToken) {\r\n        return { success: false, message: 'Không có refresh token' };\r\n      }\r\n      const response = await fetch('http://localhost:5000/api/refresh-token', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ refreshToken })\r\n      });\r\n      const result = await response.json();\r\n      if (result.success) {\r\n        localStorage.setItem('accessToken', result.accessToken);\r\n        localStorage.setItem('refreshToken', result.refreshToken);\r\n      }\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Refresh token error:', error);\r\n      return { success: false, message: 'Không thể làm mới token' };\r\n    }\r\n  }\r\n\r\n  async logout() {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n    this.userModel.clearCurrentUser();\r\n    await fetch('http://localhost:5000/api/logout', {\r\n      method: 'POST',\r\n      headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` }\r\n    });\r\n  }\r\n\r\n  async getCurrentUser() {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (!token) return null;\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/user', {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      const result = await response.json();\r\n      if (result.success) {\r\n        this.userModel.setCurrentUser(result.user);\r\n        return result.user;\r\n      } else if (result.expired) {\r\n        const refreshResult = await this.refreshToken();\r\n        if (refreshResult.success) {\r\n          return await this.getCurrentUser(); // Thử lại với token mới\r\n        } else {\r\n          localStorage.removeItem('accessToken');\r\n          localStorage.removeItem('refreshToken');\r\n          this.userModel.clearCurrentUser();\r\n          return null;\r\n        }\r\n      } else {\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        this.userModel.clearCurrentUser();\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Get user error:', error);\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('refreshToken');\r\n      this.userModel.clearCurrentUser();\r\n      return null;\r\n    }\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return !!this.userModel.getCurrentUser();\r\n  }\r\n\r\n  async getOrders() {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/orders', {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` }\r\n      });\r\n      const result = await response.json();\r\n      if (result.success) {\r\n        return result.orders;\r\n      } else if (result.expired) {\r\n        const refreshResult = await AuthService.refreshToken();\r\n        if (refreshResult.success) {\r\n          // Thử lại với token mới\r\n          const retryResponse = await fetch('http://localhost:5000/api/orders', {\r\n            headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` }\r\n          });\r\n          const retryResult = await retryResponse.json();\r\n          if (retryResult.success) {\r\n            return retryResult.orders;\r\n          }\r\n          throw new Error(retryResult.message || 'Không thể tải đơn hàng.');\r\n        }\r\n        throw new Error('Phiên đăng nhập hết hạn.');\r\n      }\r\n      throw new Error(result.message || 'Không thể tải đơn hàng.');\r\n    } catch (error) {\r\n      console.error('OrderModel getOrders error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getAddressCount(userId) {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/addresses', {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` }\r\n      });\r\n      const result = await response.json();\r\n      if (result.success) {\r\n        return result.addresses.length;\r\n      } else if (result.expired) {\r\n        const refreshResult = await AuthService.refreshToken();\r\n        if (refreshResult.success) {\r\n          const retryResponse = await fetch('http://localhost:5000/api/addresses', {\r\n            headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` }\r\n          });\r\n          const retryResult = await retryResponse.json();\r\n          if (retryResult.success) {\r\n            return retryResult.addresses.length;\r\n          }\r\n          throw new Error(retryResult.message || 'Không thể tải danh sách địa chỉ.');\r\n        }\r\n        throw new Error('Phiên đăng nhập hết hạn.');\r\n      }\r\n      throw new Error(result.message || 'Không thể tải danh sách địa chỉ.');\r\n    } catch (error) {\r\n      console.error('OrderModel getAddressCount error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}